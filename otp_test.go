package otp

import (
	"testing"
)

type wrapper struct {
	HOTPKey
	expect string
}

func TestHOTP(t *testing.T) {
	w := []wrapper{
		{HOTPKey{"GEZDGNBVGY3TQOJQGEZDGNBVGY3TQOJQ", SHA1, 8, 0x0000000000000001}, "94287082"},
		{HOTPKey{"GEZDGNBVGY3TQOJQGEZDGNBVGY3TQOJQ", SHA1, 8, 0x00000000023523EC}, "07081804"},
		{HOTPKey{"GEZDGNBVGY3TQOJQGEZDGNBVGY3TQOJQ", SHA1, 8, 0x0000000027BC86AA}, "65353130"},
		{HOTPKey{"GEZDGNBVGY3TQOJQGEZDGNBVGY3TQOJQGEZDGNBVGY3TQOJQGEZA====", SHA256, 8, 0x0000000000000001}, "46119246"},
		{HOTPKey{"GEZDGNBVGY3TQOJQGEZDGNBVGY3TQOJQGEZDGNBVGY3TQOJQGEZA====", SHA256, 8, 0x00000000023523EC}, "68084774"},
		{HOTPKey{"GEZDGNBVGY3TQOJQGEZDGNBVGY3TQOJQGEZDGNBVGY3TQOJQGEZA====", SHA256, 8, 0x0000000027BC86AA}, "77737706"},
		{HOTPKey{"GEZDGNBVGY3TQOJQGEZDGNBVGY3TQOJQGEZDGNBVGY3TQOJQGEZDGNBVGY3TQOJQGEZDGNBVGY3TQOJQGEZDGNBVGY3TQOJQGEZDGNA=", SHA512, 8, 0x0000000000000001}, "90693936"},
		{HOTPKey{"GEZDGNBVGY3TQOJQGEZDGNBVGY3TQOJQGEZDGNBVGY3TQOJQGEZDGNBVGY3TQOJQGEZDGNBVGY3TQOJQGEZDGNBVGY3TQOJQGEZDGNA=", SHA512, 8, 0x00000000023523EC}, "25091201"},
		{HOTPKey{"GEZDGNBVGY3TQOJQGEZDGNBVGY3TQOJQGEZDGNBVGY3TQOJQGEZDGNBVGY3TQOJQGEZDGNBVGY3TQOJQGEZDGNBVGY3TQOJQGEZDGNA=", SHA512, 8, 0x0000000027BC86AA}, "47863826"},
	}
	for _, v := range w {
		otp := v.OTP()
		if otp != v.expect {
			t.Fatalf("Mismatch. Want: %s Got: %s", v.expect, otp)
		} else {
			t.Logf("Success. Want: %s Got: %s", v.expect, otp)
		}
	}
}

func TestValidate(t *testing.T) {
	invalid := []HOTPKey{
		{"GEZDGNBVGY3TQOJQGEZDGNBVGY3TQOJQ", "SHA384", 8, 0x0000000000000001},
		{"GEZDGNBVGY3TQOJQGEZDGNBVGY3TQOJQ", SHA1, 11, 0x0000000000000001},
		{"NOTBASE32 . . .", SHA1, 6, 0x0000000000000001},
	}
	for _, v := range invalid {
		if v.Validate() {
			t.Fatalf("Failure. Invalid key marked as valid: %v", v)
		} else {
			t.Logf("Success (invalid).")
		}
	}

	valid := []HOTPKey{
		{"GEZDGNBVGY3TQOJQGEZDGNBVGY3TQOJQ", "SHA1", 1, 0x0000000000000001},
		{"GEZDGNBVGY3TQOJQGEZDGNBVGY3TQOJQGEZDGNBVGY3TQOJQGEZA====", "SHA256", 3, 0x0000000000000001},
		{"GEZDGNBVGY3TQOJQGEZDGNBVGY3TQOJQGEZDGNBVGY3TQOJQGEZDGNBVGY3TQOJQGEZDGNBVGY3TQOJQGEZDGNBVGY3TQOJQGEZDGNA=", "SHA512", 10, 0x0000000027BC86AA},
	}
	for _, v := range valid {
		if !v.Validate() {
			t.Fatalf("Failure. Valid key marked as invalid: %v", v)
		} else {
			t.Logf("Success (valid).")
		}
	}
}
